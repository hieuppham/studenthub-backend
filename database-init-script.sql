--NOTE: This script got some changes compared with its original version generated by database diagram 

drop database if exists student_hub;
create database if not exists student_hub;
use student_hub;

DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS `users` (
	`uid` varchar(50) NOT NULL,
	`reputation` int NOT NULL DEFAULT 0,
	`description` TEXT,
	`joining_date` DATE NOT NULL DEFAULT (CURRENT_DATE),
	`display_name` VARCHAR(255) NOT NULL UNIQUE,
	`interested_tags` SET('python', 'java', 'cpp') NOT NULL,
	`photo_url` TEXT,
	`phone_number` varchar(11),
	`email` varchar(255) NOT NULL UNIQUE,
	PRIMARY KEY (`uid`)
);

drop table if EXISTS questions;
CREATE TABLE if not exists `questions` (
	`id` int NOT NULL AUTO_INCREMENT,
	`user_id` varchar(50) NOT NULL,
	`user_display_name` VARCHAR(255) NOT NULL,
	`title` TEXT NOT NULL,
	`tags` set('java', 'opp', 'springboot') NOT NULL,
	`content` TEXT NOT NULL,
	`score` int NOT NULL DEFAULT 0,
	`created_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	`updated_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY key (`id`)
);

drop table if exists answers;
CREATE TABLE if not exists `answers` (
	`id` int NOT NULL AUTO_INCREMENT,
	`question_id` int NOT NULL,
	`user_id` varchar(50) NOT NULL,
	`user_display_name` VARCHAR(255) NOT NULL,
	`content` TEXT NOT NULL,
	`score` int NOT NULL DEFAULT 0,
	`verifiy` BOOLEAN NOT NULL DEFAULT FALSE,
	`created_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	`updated_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (`id`)
);

drop table if exists question_voters;
CREATE TABLE if not exists `question_voters` (
	`id` int NOT NULL AUTO_INCREMENT,
	`question_id` int NOT NULL,
	`user_id` varchar(50) NOT NULL,
	`state` int NOT NULL DEFAULT 0,
	PRIMARY KEY (`id`)
);

drop table if exists answer_voters;
CREATE TABLE if not exists `answer_voters` (
	`id` int NOT NULL AUTO_INCREMENT,
	`user_id` varchar(50) NOT NULL,
	`answer_id` int NOT NULL,
	`state` int NOT NULL DEFAULT 0,
	PRIMARY KEY (`id`)
);

drop table if exists tag;
CREATE TABLE if not exists `tag` (
	`id` int NOT NULL AUTO_INCREMENT,
	`name` varchar(255) NOT NULL UNIQUE,
	PRIMARY KEY (`id`)
);

drop table if exists question_comment;
CREATE TABLE if not exists `question_comment` (
	`id` int NOT NULL AUTO_INCREMENT,
	`question_id` int NOT NULL,
	`user_id` varchar(50) NOT NULL,
	`content` TEXT NOT NULL,
	`user_display_name` VARCHAR(255) NOT NULL,
	`created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (`id`)
);
drop table if exists answer_comment;
CREATE TABLE if not exists `answer_comment` (
	`id` int NOT NULL AUTO_INCREMENT,
	`answer_id` int NOT NULL,
	`user_id` VARCHAR(50) NOT NULL,
	`content` TEXT NOT NULL,
	`user_display_name` VARCHAR(255) NOT NULL,
	`created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (`id`)
);

drop table if exists question_tag;
CREATE TABLE if not exists `question_tag` (
	`question_id` int NOT NULL,
	`tag_id` int NOT NULL
);

drop table if exists interested_tag;
CREATE TABLE if not exists `interested_tag` (
	`tag_id` int NOT NULL,
	`user_id` varchar(50) NOT NULL
);

ALTER TABLE `questions` ADD CONSTRAINT `questions_fk0` FOREIGN KEY (`user_id`) REFERENCES `users`(`uid`);
ALTER TABLE `questions` ADD CONSTRAINT `questions_fk1` FOREIGN KEY (`user_display_name`) REFERENCES `users`(`display_name`);

ALTER TABLE `answers` ADD CONSTRAINT `answers_fk0` FOREIGN KEY (`question_id`) REFERENCES `questions`(`id`);

ALTER TABLE `answers` ADD CONSTRAINT `answers_fk1` FOREIGN KEY (`user_id`) REFERENCES `users`(`uid`);

ALTER TABLE `answers` ADD CONSTRAINT `answers_fk2` FOREIGN KEY (`user_display_name`) REFERENCES `users`(`display_name`);

ALTER TABLE `question_voters` ADD CONSTRAINT `question_voters_fk0` FOREIGN KEY (`question_id`) REFERENCES `questions`(`id`);

ALTER TABLE `question_voters` ADD CONSTRAINT `question_voters_fk1` FOREIGN KEY (`user_id`) REFERENCES `users`(`uid`);

ALTER TABLE `answer_voters` ADD CONSTRAINT `answer_voters_fk0` FOREIGN KEY (`user_id`) REFERENCES `users`(`uid`);

ALTER TABLE `answer_voters` ADD CONSTRAINT `answer_voters_fk1` FOREIGN KEY (`answer_id`) REFERENCES `answers`(`id`);

ALTER TABLE `question_comment` ADD CONSTRAINT `question_comment_fk0` FOREIGN KEY (`question_id`) REFERENCES `questions`(`id`);

ALTER TABLE `question_comment` ADD CONSTRAINT `question_comment_fk1` FOREIGN KEY (`user_id`) REFERENCES `users`(`uid`);

ALTER TABLE `question_comment` ADD CONSTRAINT `question_comment_fk2` FOREIGN KEY (`user_display_name`) REFERENCES `users`(`display_name`);

ALTER TABLE `answer_comment` ADD CONSTRAINT `answer_comment_fk0` FOREIGN KEY (`answer_id`) REFERENCES `answers`(`id`);

ALTER TABLE `answer_comment` ADD CONSTRAINT `answer_comment_fk1` FOREIGN KEY (`user_id`) REFERENCES `users`(`uid`);

ALTER TABLE `answer_comment` ADD CONSTRAINT `answer_comment_fk2` FOREIGN KEY (`user_display_name`) REFERENCES `users`(`display_name`);

ALTER TABLE `question_tag` ADD CONSTRAINT `question_tag_fk0` FOREIGN KEY (`question_id`) REFERENCES `questions`(`id`);

ALTER TABLE `question_tag` ADD CONSTRAINT `question_tag_fk1` FOREIGN KEY (`tag_id`) REFERENCES `tag`(`id`);

ALTER TABLE `interested_tag` ADD CONSTRAINT `interested_tag_fk0` FOREIGN KEY (`tag_id`) REFERENCES `tag`(`id`);

ALTER TABLE `interested_tag` ADD CONSTRAINT `interested_tag_fk1` FOREIGN KEY (`user_id`) REFERENCES `users`(`uid`);